name: ci:build:image

on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:

  build:
    name: Continuous integration (build image)
    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    outputs:
      server-image: ${{ steps.build-publish.outputs.image }}

    env:
      IMAGE_NAME: ${{ github.repository_owner }}/patient-web

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Log in to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build and publish
        id: build-publish
        uses: ./.github/actions/package/build-publish
        with:
          package: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


  test:
    name: Continuous integration (build image test)

    needs:
      - build

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        port:
          - 3000
          - 3123

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            settings.json
            scripts/assert-replica-set.js
            .github/actions/docker/container/ip-address/action.yml
            .github/actions/docker/container/is-healthy/action.yml
            .github/actions/docker/container/is-running/action.yml
            .github/actions/network/is-reachable/action.yml
          sparse-checkout-cone-mode: false

      - name: Get server image URL
        id: server-image-url
        env:
          IMAGE_METADATA: ${{ needs.build.outputs.server-image }}
        run: |
          IMAGE_URL="$(echo "${IMAGE_METADATA}" | jq -r 'first(.tags[] | select(test(":sha-[0-9a-f]{40}$")))')"
          echo "url=${IMAGE_URL}" >> "${GITHUB_OUTPUT}"
          test -n "${IMAGE_URL}"

      - name: Create a network to connect the app to the database
        run: |
          docker network create patient-network

      - name: Start MongoDB container
        env:
          MONGO_VERSION: '7.0.5'
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/data/db"
          docker container run \
            --detach \
            --restart unless-stopped \
            --network patient-network \
            --volume "${GITHUB_WORKSPACE}/data/db":/data/db \
            --volume "${GITHUB_WORKSPACE}/scripts/assert-replica-set.js":/scripts/assert-replica-set.js \
            --log-opt max-size=100m \
            --log-opt max-file=7 \
            --health-cmd 'mongosh --eval "replSet = \"meteor\"; hostname = \"mongodb\"" /scripts/assert-replica-set.js' \
            --health-interval 5s \
            --health-retries 3 \
            --health-timeout 10s \
            --health-start-period 40s \
            --name mongodb \
            "mongo:${MONGO_VERSION}" mongod --dbpath /data/db --replSet meteor

      - name: Wait for MongoDB container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: mongodb
          timeout: 60

      - name: Configure server
        id: configure-server
        run: |
          echo "meteor-settings=$(jq -c . settings.json)" >> "${GITHUB_OUTPUT}"

      - name: Run server
        env:
          ROOT_URL: http://localhost:${{ matrix.port }}
          MONGO_URL: mongodb://mongodb:27017/meteor
          MONGO_OPLOG_URL: ""
          METEOR_SETTINGS: ${{ steps.configure-server.outputs.meteor-settings }}
          PORT: ${{ matrix.port }}
        run: |
          docker container run \
            --init \
            --detach \
            --network patient-network \
            --publish "${PORT}:${PORT}" \
            --env "ROOT_URL=${ROOT_URL}" \
            --env "MONGO_URL=${MONGO_URL}" \
            --env "MONGO_OPLOG_URL=${MONGO_OPLOG_URL}" \
            --env "METEOR_SETTINGS=${METEOR_SETTINGS}" \
            --env "PORT=${PORT}" \
            --name server \
            ${{ steps.server-image-url.outputs.url }}

      - name: Retrieve server container IP address
        id: server-container-ip-address
        uses: ./.github/actions/docker/container/ip-address
        with:
          container: server

      - name: Wait for container to be running
        uses: ./.github/actions/docker/container/is-running
        with:
          container: server
          timeout: 60

      - name: Wait for server container port to be available
        uses: ./.github/actions/network/is-reachable
        with:
          timeout: 60
          host: ${{ steps.server-container-ip-address.outputs.address }}
          port: ${{ matrix.port }}

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show mongodb container logs
        if: always()
        run: |
          docker container logs --timestamps mongodb

      - name: Show server container logs
        if: always()
        run: |
          docker container logs --timestamps server

      - name: Run healthcheck
        run: |
          timeout 60 bash -c \
            'curl -f http://${{ steps.server-container-ip-address.outputs.address }}:${{ matrix.port }}/api/healthcheck'

      - name: Wait for container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: server
          timeout: 60

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show mongodb container logs
        if: always()
        run: |
          docker container logs --timestamps mongodb

      - name: Show server container logs
        if: always()
        run: |
          docker container logs --timestamps server

      - name: Stop Server container
        run: |
          docker container stop server

      - name: Stop MongoDB container
        run: |
          docker container stop mongodb

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show mongodb container logs
        if: always()
        run: |
          docker container logs --timestamps mongodb

      - name: Show server container logs
        if: always()
        run: |
          docker container logs --timestamps server

      - name: Remove Server container
        run: |
          docker container rm server

      - name: Remove MongoDB container
        run: |
          docker container rm mongodb

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Delete network
        run: |
          docker network rm patient-network


  build-compose:
    name: Continuous integration (build compose)

    needs:
      - build

    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bake üßë‚Äçüç≥
        uses: docker/bake-action@v6
        with:
          files: |
            compose.yaml
          set: |
            patient-web.cache-from=type=gha
            patient-web.output=type=docker,dest=/tmp/patient-web.tar
            patient-web.tags=patients-patient-web

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: images-patient-web
          path: /tmp/patient-web.tar
          retention-days: 1


  build-compose-test:
    name: Continuous integration (build compose test)

    needs:
      - build-compose

    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 5

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download image
        uses: actions/download-artifact@v4
        with:
          name: images-patient-web
          path: /tmp/images

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load image
        run: |
          docker image load --input /tmp/images/patient-web.tar

      - name: Start
        run: |
          docker compose up --no-build --detach

      - id: patient-db-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-db

      - name: Wait for database container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-db-container.outputs.id }}
          timeout: 60

      - name: Wait for web port to be available
        uses: ./.github/actions/network/is-reachable
        with:
          timeout: 60
          port: 3000

      - id: patient-web-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-web

      - name: Wait for web container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-web-container.outputs.id }}
          timeout: 60

      - name: Call healthcheck endpoint
        run: |
          timeout 60 bash -c \
            'curl -f http://localhost:3000/api/healthcheck'

      - name: Run healthcheck script
        run: |
          timeout 60 bash -c \
            'node scripts/healthcheck.cjs http://localhost:3000/api/healthcheck'

      - name: Stop
        run: |
          docker compose down


  test-deploy:
    name: Continuous integration (test deploy)

    needs:
      - build

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        port:
          - 3000
          - 3123

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Start
        env:
          ROOT_URL: http://localhost:${{ matrix.port }}
          PORT: ${{ matrix.port }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          docker compose \
            --env-file .env -f compose.yaml \
            --env-file .deploy/ghcr.io/.env -f .deploy/ghcr.io/patient-web.yaml \
            up --no-build --detach

      - id: patient-db-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-db

      - name: Wait for database container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-db-container.outputs.id }}
          timeout: 60

      - name: Wait for web port to be available
        uses: ./.github/actions/network/is-reachable
        with:
          timeout: 60
          port: ${{ matrix.port }}

      - id: patient-web-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-web

      - name: Wait for web container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-web-container.outputs.id }}
          timeout: 60

      - name: Call healthcheck endpoint
        run: |
          timeout 60 bash -c \
            'curl -f http://localhost:${{ matrix.port }}/api/healthcheck'

      - name: Run healthcheck script
        run: |
          timeout 60 bash -c \
            'node scripts/healthcheck.cjs http://localhost:${{ matrix.port }}/api/healthcheck'

      - name: Stop
        run: |
          docker compose down


  build-backup:
    name: Continuous integration (build image backup)
    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    outputs:
      image: ${{ steps.build-publish.outputs.image }}

    env:
      IMAGE_NAME: ${{ github.repository_owner }}/patient-backup

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Log in to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build and publish
        id: build-publish
        uses: ./.github/actions/package/build-publish
        with:
          file: .deploy/backup/Dockerfile
          package: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


  test-backup:
    name: Continuous integration (build image backup test)

    needs:
      - build-backup

    strategy:
      matrix:
        platform:
          - ubuntu-24.04

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/assert-replica-set.js
            .github/actions/docker/container/ip-address/action.yml
            .github/actions/docker/container/is-healthy/action.yml
            .github/actions/docker/container/is-running/action.yml
            .github/actions/network/is-reachable/action.yml
          sparse-checkout-cone-mode: false

      - name: Get image URL
        id: image-url
        env:
          IMAGE_METADATA: ${{ needs.build-backup.outputs.image }}
        run: |
          IMAGE_URL="$(echo "${IMAGE_METADATA}" | jq -r 'first(.tags[] | select(test(":sha-[0-9a-f]{40}$")))')"
          echo "url=${IMAGE_URL}" >> "${GITHUB_OUTPUT}"
          test -n "${IMAGE_URL}"

      - name: Create a network to connect the backup container to the database
        run: |
          docker network create patient-backup-network

      - name: Start MongoDB container
        env:
          MONGO_VERSION: '7.0.5'
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/data/db"
          docker container run \
            --detach \
            --restart unless-stopped \
            --network patient-backup-network \
            --volume "${GITHUB_WORKSPACE}/data/db":/data/db \
            --volume "${GITHUB_WORKSPACE}/scripts/assert-replica-set.js":/scripts/assert-replica-set.js \
            --log-opt max-size=100m \
            --log-opt max-file=7 \
            --health-cmd 'mongosh --eval "replSet = \"meteor\"; hostname = \"mongodb\"" /scripts/assert-replica-set.js' \
            --health-interval 5s \
            --health-retries 3 \
            --health-timeout 10s \
            --health-start-period 40s \
            --name mongodb \
            "mongo:${MONGO_VERSION}" mongod --dbpath /data/db --replSet meteor

      - name: Wait for MongoDB container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: mongodb
          timeout: 60

      - name: Install age
        run: |
          sudo apt-get update
          sudo apt-get install -y age

      - name: Generate age keys
        run: |
          age-keygen -o private.key

      - name: Configure
        id: configure
        run: |
          echo "schedule=$(date -d "+1 minutes 10 seconds" '+%M %H * * *')" >> "${GITHUB_OUTPUT}"
          echo "backup-key=$(grep 'public key' private.key | cut -d' ' -f4)" >> "${GITHUB_OUTPUT}"

      - name: Create test backups directory
        run: |
          mkdir backups

      - name: Run backup container
        env:
          MONGO_URL: mongodb://mongodb:27017/meteor
          BACKUP_SCHEDULE: ${{ steps.configure.outputs.schedule }}
          BACKUP_INTERVAL: 120
          BACKUP_KEY: ${{ steps.configure.outputs.backup-key }}
        run: |
          docker container run \
            --init \
            --detach \
            --network patient-backup-network \
            --env "MONGO_URL=${MONGO_URL}" \
            --env "BACKUP_SCHEDULE=${BACKUP_SCHEDULE}" \
            --env "BACKUP_INTERVAL=${BACKUP_INTERVAL}" \
            --env "BACKUP_KEY=${BACKUP_KEY}" \
            --mount type=bind,src="${GITHUB_WORKSPACE}/backups/",dst=/backups \
            --name backup-container \
            ${{ steps.image-url.outputs.url }}

      - name: Wait for backup container to be running
        uses: ./.github/actions/docker/container/is-running
        with:
          container: backup-container
          timeout: 60

      - name: Wait for backup container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: backup-container
          timeout: 15
          debug: true

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show backup container logs
        if: always()
        run: |
          docker container logs --timestamps backup-container

      - name: Verify backup files
        env:
          DELAY: 30
          INTERVAL: 5
          TIMEOUT: 90
        run: |
          echo "Waiting ${DELAY} seconds before starting checks..."
          sleep "${DELAY}"

          start_time="$(date +%s)"

          while true; do
            echo "Checking backup files (attempt duration: $(($(date +%s) - start_time))s)"

            if [ ! -d "backups" ]; then
              echo "Backups directory not found - waiting..."
            else
              if [ "$(find backups -type f | wc -l)" -eq 1 ] ; then
                echo "‚úÖ Backup file exists!"
                exit 0
              else
                echo "‚ö†Ô∏è  Backup file is missing - retrying..."
              fi
            fi

            if [ $(($(date +%s) - start_time)) -ge "${TIMEOUT}" ]; then
              echo "‚ùå Timeout reached after ${TIMEOUT} seconds"
              exit 1
            fi

            sleep "${INTERVAL}"
          done

      - name: Retrieve mongodb container IP address
        id: mongodb-container-ip-address
        uses: ./.github/actions/docker/container/ip-address
        with:
          container: mongodb

      - name: Wait for mongodb container port to be available
        uses: ./.github/actions/network/is-reachable
        with:
          timeout: 60
          host: ${{ steps.mongodb-container-ip-address.outputs.address }}
          port: 27017

      - name: Install MongoDB Database Tools
        env:
          PACKAGE: mongodb-database-tools-ubuntu2404-x86_64-100.11.0.deb
        run: |
          wget "https://fastdl.mongodb.org/tools/db/${{ env.PACKAGE }}"
          sudo apt install "./${{ env.PACKAGE }}"

      - name: Verify mongorestore installation
        run: |
          mongorestore --version

      - name: Restore backup
        run: |
          < private.key age --decrypt -i - backups/* | \
            mongorestore --uri mongodb://${{ steps.mongodb-container-ip-address.outputs.address }}:27017 \
            --drop \
            --nsInclude 'meteor.*' \
            --nsFrom 'meteor.*' \
            --nsTo 'meteor.*' \
            --archive --gzip

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show mongodb container logs
        if: always()
        run: |
          docker container logs --timestamps mongodb

      - name: Show backup container logs
        if: always()
        run: |
          docker container logs --timestamps backup-container

      - name: Stop backup container
        run: |
          docker container stop backup-container

      - name: Stop MongoDB container
        run: |
          docker container stop mongodb

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show mongodb container logs
        if: always()
        run: |
          docker container logs --timestamps mongodb

      - name: Show backup container logs
        if: always()
        run: |
          docker container logs --timestamps backup-container

      - name: Remove backup container
        run: |
          docker container rm backup-container

      - name: Remove MongoDB container
        run: |
          docker container rm mongodb

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a


  build-backup-retention-policy:
    name: Continuous integration (build image backup-retention-policy)
    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    outputs:
      image: ${{ steps.build-publish.outputs.image }}

    env:
      IMAGE_NAME: ${{ github.repository_owner }}/patient-backup-retention-policy

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Log in to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build and publish
        id: build-publish
        uses: ./.github/actions/package/build-publish
        with:
          file: .deploy/backup-retention-policy/Dockerfile
          package: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


  test-backup-retention-policy:
    name: Continuous integration (build image backup-retention-policy test)

    needs:
      - build-backup-retention-policy

    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/docker/container/is-healthy/action.yml
            .github/actions/docker/container/is-running/action.yml
          sparse-checkout-cone-mode: false

      - name: Get image URL
        id: image-url
        env:
          IMAGE_METADATA: ${{ needs.build-backup-retention-policy.outputs.image }}
        run: |
          IMAGE_URL="$(echo "${IMAGE_METADATA}" | jq -r 'first(.tags[] | select(test(":sha-[0-9a-f]{40}$")))')"
          echo "url=${IMAGE_URL}" >> "${GITHUB_OUTPUT}"
          test -n "${IMAGE_URL}"

      - name: Configure
        id: configure
        run: |
          echo "schedule=$(date -d "+1 minutes 10 seconds" '+%M %H * * *')" >> "${GITHUB_OUTPUT}"

      - name: Create test backups directory
        run: |
          mkdir backups
          touch backups/2021-01-01_12:34:56
          touch backups/2022-01-01_12:34:56
          touch backups/2022-01-31_12:34:56
          touch backups/2023-01-11_12:34:56
          touch backups/2023-01-22_12:34:56
          touch backups/2023-02-01_12:34:56
          touch backups/2023-02-02_12:34:56
          touch backups/2023-02-03_12:34:56
          touch backups/2023-02-04_12:34:56
          touch backups/2023-02-05_12:34:56
          touch backups/2023-02-06_12:34:56
          touch backups/2023-02-07_12:34:56
          touch backups/2023-02-08_12:34:56
          touch backups/2023-02-09_12:34:56
          touch backups/2023-02-10_12:34:56
          touch backups/2026-02-04_12:34:56
          touch backups/2026-02-04_12:34:57
          touch backups/2026-03-04_12:34:56
          touch backups/2027-06-05_12:34:56

      - name: Run backup retention policy container
        env:
          NOW: 2023-02-10_12:34:56
          BACKUP_RETENTION_POLICY_SCHEDULE: ${{ steps.configure.outputs.schedule }}
          BACKUP_RETENTION_POLICY_INTERVAL: 120
        run: |
          docker container run \
            --init \
            --detach \
            --env "NOW=${NOW}" \
            --env "BACKUP_RETENTION_POLICY_SCHEDULE=${BACKUP_RETENTION_POLICY_SCHEDULE}" \
            --env "BACKUP_RETENTION_POLICY_INTERVAL=${BACKUP_RETENTION_POLICY_INTERVAL}" \
            --mount type=bind,src="${GITHUB_WORKSPACE}/backups/",dst=/backups \
            --name backup-retention-policy-container \
            ${{ steps.image-url.outputs.url }}

      - name: Wait for container to be running
        uses: ./.github/actions/docker/container/is-running
        with:
          container: backup-retention-policy-container
          timeout: 60

      - name: Wait for container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: backup-retention-policy-container
          timeout: 15
          debug: true

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show backup retention policy container logs
        if: always()
        run: |
          docker container logs --timestamps backup-retention-policy-container

      - name: Verify backup files
        env:
          DELAY: 30
          INTERVAL: 5
          TIMEOUT: 90
        run: |
          echo "Waiting ${DELAY} seconds before starting checks..."
          sleep "${DELAY}"

          cat << EOF > expected.txt
          backups/2021-01-01_12:34:56
          backups/2022-01-31_12:34:56
          backups/2023-01-22_12:34:56
          backups/2023-02-05_12:34:56
          backups/2023-02-06_12:34:56
          backups/2023-02-07_12:34:56
          backups/2023-02-08_12:34:56
          backups/2023-02-09_12:34:56
          backups/2023-02-10_12:34:56
          backups/2026-02-04_12:34:57
          backups/2026-03-04_12:34:56
          backups/2027-06-05_12:34:56
          EOF

          sort expected.txt > expected_sorted.txt

          start_time="$(date +%s)"

          while true; do
            echo "Checking backup files (attempt duration: $(($(date +%s) - start_time))s)"

            if [ ! -d "backups" ]; then
              echo "Backups directory not found - waiting..."
            else
              find backups -type f | sort > actual_sorted.txt

              if diff -q expected_sorted.txt actual_sorted.txt > /dev/null; then
                echo "‚úÖ All backup files verified!"
                exit 0
              else
                echo "‚ö†Ô∏è  File mismatch detected - retrying..."
                diff -y expected_sorted.txt actual_sorted.txt || true
              fi
            fi

            if [ $(($(date +%s) - start_time)) -ge "${TIMEOUT}" ]; then
              echo "‚ùå Timeout reached after ${TIMEOUT} seconds"
              exit 1
            fi

            sleep "${INTERVAL}"
          done

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show backup retention policy container logs
        if: always()
        run: |
          docker container logs --timestamps backup-retention-policy-container

      - name: Stop backup retention policy container
        run: |
          docker container stop backup-retention-policy-container

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Show backup retention policy container logs
        if: always()
        run: |
          docker container logs --timestamps backup-retention-policy-container

      - name: Remove backup retention policy container
        run: |
          docker container rm backup-retention-policy-container

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a


  test-deploy-with-backup:
    name: Continuous integration (test deploy with backup)

    needs:
      - build
      - build-backup
      - build-backup-retention-policy

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        port:
          - 3000
          - 3123

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    env:
      FLAGS: >
        --env-file .env -f compose.yaml
        --env-file .deploy/ghcr.io/.env
        --env-file .deploy/backup/.env -f .deploy/backup/compose.yaml
        --env-file .deploy/backup-retention-policy/.env
        -f .deploy/backup-retention-policy/compose.yaml
        -f .deploy/ghcr.io/patient-web.yaml
        -f .deploy/ghcr.io/patient-backup.yaml
        -f .deploy/ghcr.io/patient-backup-retention-policy.yaml

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Install age
        run: |
          sudo apt-get update
          sudo apt-get install -y age

      - name: Generate age keys
        run: |
          age-keygen -o private.key

      - name: Configure
        id: configure
        run: |
          echo "backup-key=$(grep 'public key' private.key | cut -d' ' -f4)" >> "${GITHUB_OUTPUT}"
          echo "meteor-settings=$(jq -c . settings.json)" >> "${GITHUB_OUTPUT}"

      - name: Create test backups directory
        run: |
          mkdir backups

      - name: Start
        env:
          ROOT_URL: http://localhost:${{ matrix.port }}
          PORT: ${{ matrix.port }}
          # TODO: Should be tag on push tag?
          IMAGE_TAG: sha-${{ github.sha }}
          METEOR_SETTINGS: ${{ steps.configure.outputs.meteor-settings }}
          BACKUP_KEY: ${{ steps.configure.outputs.backup-key }}
          BACKUP_DIR: ${{ github.workspace }}/backups
          BACKUP_SCHEDULE: "0 21 * * *"
          BACKUP_INTERVAL: "129600"
          BACKUP_RETENTION_POLICY_SCHEDULE: "0 18 * * 0"
          BACKUP_RETENTION_POLICY_INTERVAL: "691200"
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} up --no-build --detach

      - id: patient-db-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-db
          compose-flags: ${{ env.FLAGS }}

      - name: Wait for database container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-db-container.outputs.id }}
          timeout: 60
          debug: true

      - id: patient-db-backup-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-db-backup
          compose-flags: ${{ env.FLAGS }}

      - name: Wait for backup container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-db-backup-container.outputs.id }}
          timeout: 15
          debug: true

      - id: patient-db-backup-retention-policy-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-db-backup-retention-policy
          compose-flags: ${{ env.FLAGS }}

      - name: Wait for backup retention policy container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-db-backup-retention-policy-container.outputs.id }}
          timeout: 15
          debug: true

      - name: Wait for web port to be available
        uses: ./.github/actions/network/is-reachable
        with:
          timeout: 60
          port: ${{ matrix.port }}

      - id: patient-web-container
        uses: ./.github/actions/docker/compose/container
        with:
          service: patient-web
          compose-flags: ${{ env.FLAGS }}

      - name: Wait for web container to be healthy
        uses: ./.github/actions/docker/container/is-healthy
        with:
          container: ${{ steps.patient-web-container.outputs.id }}
          timeout: 60
          debug: true

      - name: Call healthcheck endpoint
        run: |
          timeout 60 bash -c \
            'curl -f http://localhost:${{ matrix.port }}/api/healthcheck'

      - name: Run healthcheck script
        run: |
          timeout 60 bash -c \
            'node scripts/healthcheck.cjs http://localhost:${{ matrix.port }}/api/healthcheck'

      - name: Show compose containers
        if: always()
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} ps

      - name: Show all compose containers
        if: always()
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} ps -a

      - name: Show compose services
        if: always()
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} ps --services

      - name: Show compose logs
        if: always()
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} logs

      - name: Show docker containers
        if: always()
        run: |
          docker ps -a

      - name: Stop
        run: |
          # shellcheck disable=SC2086
          docker compose ${FLAGS} down
