name: ci:build:compose

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  list-targets:
    name: Continuous integration (build compose list targets)

    runs-on: ubuntu-latest

    outputs:
      targets: ${{ steps.list-targets.outputs.targets }}

    timeout-minutes: 1

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: List targets
        id: list-targets
        uses: docker/bake-action/subaction/list-targets@v4
        with:
          files: |
            compose.yaml

  build:
    name: Continuous integration (build compose)

    needs:
      - list-targets

    strategy:
      matrix:
        platform:
          - ubuntu-latest
        target: ${{ fromJson(needs.list-targets.outputs.targets) }}

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 15

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Wait for image build workflow to succeed
        uses: ArcticLampyrid/action-wait-for-workflow@v1.0.4
        with:
          workflow: ci:build:image.yml
          sha: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bake üßë‚Äçüç≥
        uses: docker/bake-action@v4
        with:
          files: |
            compose.yaml
          targets: ${{ matrix.target }}
          set: |
            ${{ matrix.target }}.cache-from=type=gha
            ${{ matrix.target }}.output=type=docker,dest=/tmp/${{ matrix.target }}.tar
            ${{ matrix.target }}.tags=patients-${{ matrix.target }}

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: images-${{ matrix.target }}
          path: /tmp/${{ matrix.target }}.tar
          retention-days: 1


  test:
    name: Continuous integration (build compose test)

    needs:
      - list-targets
      - build

    strategy:
      matrix:
        platform:
          - ubuntu-latest

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 4

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download all images
        uses: actions/download-artifact@v4
        with:
          path: /tmp/images

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load image
        run: |
          docker image load --input /tmp/images/patient-web.tar

      - name: Start
        run: |
          docker compose up --no-build --detach

      - name: Wait for database container to be healthy
        run: |
          timeout 60 bash -c \
           'until docker inspect --format "{{json .State.Health }}" "$(docker compose ps -q patient-db)" | jq -e ".Status == \"healthy\"" ; do sleep 1; done'

      - name: Wait for web port to be available
        run: |
          timeout 60 bash -c \
           'until nc -z -v -w5 127.0.0.1 3000 ; do sleep 1; done'

      - name: Wait for web container to be healthy
        run: |
          timeout 60 bash -c \
           'until docker inspect --format "{{json .State.Health }}" "$(docker compose ps -q patient-web)" | jq -e ".Status == \"healthy\"" ; do sleep 1; done'

      - name: Call healthcheck endpoint
        run: |
          timeout 60 bash -c \
            'curl -f http://localhost:3000/api/healthcheck'

      - name: Run healthcheck script
        run: |
          timeout 60 bash -c \
            'node scripts/healthcheck.cjs http://localhost:3000/api/healthcheck'

      - name: Stop
        run: |
          docker compose down
